<style>
    /*    body, html {
          font-family: arial, sans-serif;
          font-size: 11pt;
        }*/

    #visualization {
        box-sizing: border-box;
        width: 100%;
        height: 300px;
      }

    .vis-time-axis{
        background: white;
      }
    .vis-odd {
        background: white;
      }
    .vis-even {
        background: white;
      }
</style>

<!-- note: moment.js must be loaded before vis.js, else vis.js uses its embedded version of moment.js -->
<!--  <script src="http://cdnjs.cloudflare.com/ajax/libs/moment.js/2.8.4/moment.min.js"></script>

<script src="../../../dist/vis.js"></script>
<link href="../../../dist/vis.min.css" rel="stylesheet" type="text/css" />-->
<p>
    This example demonstrate using groups. Note that a DataSet is used for both
    items and groups, allowing to dynamically add, update or remove both items
    and groups via the DataSet.
</p>
<div id="visualization"></div>

<script>
    var now = moment().minutes(0).seconds(0).milliseconds(0);
    var itemCount = 60;
    // create a data set with groups
    var groups = new vis.DataSet();
    groups.add([
        {
        id: 1,
        content: "Pippo",
        nestedGroups: [11, 12, 13]
        },
        {
        id: 2,
        content: "Pluto",
        nestedGroups: [21, 22],
        },
    ]);
    groups.add([
        {
        id: 11,
        content: "Supervisor",
        },
        {
        id: 12,
        content: "Engineer",
        },
        {
        id: 13,
        content: "Master",
        },
        {
        id: 21,
        content: "Driver",
        },
        {
        id: 22,
        content: "Cleaner",
        }
    ]);
    var items = new vis.DataSet();
    items.add([
        {
        id: 1,
        group: 11,
        content: '',
        start: '2013-04-01',
        end: '2013-05-01',
        type: 'range'
        },
        {
        id: 2,
        group: 11,
        content: '',
        start: '2013-06-01',
        end: '2013-07-01',
        type: 'range'
        },
        {
        id: 3,
        group: 12,
        content: '',
        start: '2013-01-01',
        end: '2013-02-01',
        type: 'range'
        },
        {
        id: 4,
        group: 13,
        content: '',
        start: '2013-01-01',
        end: '2013-05-01',
        type: 'range'
        },
        {
        id: 5,
        group: 21,
        content: '',
        start: '2013-04-01',
        end: '2013-05-01',
        type: 'range'
        },
        {
        id: 6,
        group: 22,
        content: '',
        start: '2013-04-01',
        end: '2013-05-01',
        type: 'range'
        },
    ]);
    // create a dataset with items
//    var items = new vis.DataSet();
//    var groupIds = groups.getIds();
//    var types = [ 'box', 'point', 'range', 'background']
//            for (var i = 0; i < itemCount; i++) {
//    var start = now.clone().add(Math.random() * 200, 'hours');
//    var end = start.clone().add(2, 'hours');
//    var randomGroupId = groupIds[Math.floor(Math.random() * groupIds.length)];
//    var type = types[Math.floor(4 * Math.random())]
//
//            items.add({
//            id: i,
//                    group: randomGroupId,
//                    content: 'item ' + i,
//                    start: start,
//                    end: end,
//                    type: type
//            });
//    }

    // create visualization
    var container = document.getElementById('visualization');
    var options = {
    groupOrder: 'content'  // groupOrder can be a property name or a sorting function
    };
    var timeline = new vis.Timeline(container, items, groups, options);

</script>
